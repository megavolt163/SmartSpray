substitutions:
  zones: 4  # Количество зон полива
  device_name: irrigation
  switch_id: "Irrigation"
  rainfall: sensor.ekopark_rain_amount
  temperature: sensor.ekopark_temperature

esphome:
  name: sprinkler-controller
  friendly_name: Sprinkler-controller

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

preferences:
  flash_write_interval: 10min

logger:

api:
  encryption:
    key: "P8QXF3hL0WJJEdRus65CK5NPRLgZ5UEIAZlhvLcXv6s="
  reboot_timeout: 0s

ota:
  - platform: esphome
    password: "1fcc58e85e6983b131193a51e920830b"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.163
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  ap:
    ssid: "Sprinkler-Controller"
    password: "R7j7Y3IjakFs"

time:
  - platform: homeassistant
    id: homeassistant_time

globals:
  - id: var_zone_remainings
    type: int[4]
    initial_value: "[0, 0, 0, 0]"
  - id: days_to_run
    type: int[8]
    initial_value: "[0, 0, 0, 0, 0, 0, 0, 0]"

# Общие настройки для чисел (длительность полива)
number:
  - platform: template
    id: zone_duration_{{ i }}
    name: "Zone {{ i+1 }} duration"
    step: 1
    min_value: 0
    max_value: 60
    initial_value: 15
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  for: i in range(zones|int)

# Общие настройки для сенсоров
sensor:
  - platform: template
    id: zone_remaining_{{ i }}
    name: "Zone {{ i+1 }} remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[{{ i }}];"
  for: i in range(zones|int)

  - platform: homeassistant
    id: rainfall
    entity_id: ${rainfall}
  - platform: homeassistant
    id: temperature
    entity_id: ${temperature}

  - platform: wifi_signal
    name: "${switch_id} Wifi"
    update_interval: 60s

# Шаблон для переключателей зон
switch:
  # Генерация переключателей для зон
  - platform: template
    name: "${switch_id} Zone {{ i+1 }}"
    id: irrigation_zone{{ i+1 }}
    lambda: 'return id(irrigation_channel{{ i+1 }}).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel{{ i+1 }}
      - script.execute: zone_wait
      - variables: {zone_num: {{ i }}}
      - script.wait: zone_wait
      - if:
          condition:
            lambda: 'return {{ i+1 }} < zones|int;'
          then:
            - script.execute: start_next_zone
            - variables: {current_zone: {{ i+1 }}}
    turn_off_action:
      - script.stop: zone_wait
      - lambda: |-
          id(var_zone_remainings)[{{ i }}] = 0;
          id(zone_remaining_{{ i }}).update();
      - switch.turn_off: irrigation_channel{{ i+1 }}
  for: i in range(zones|int)

  # GPIO переключатели (реле)
  - platform: gpio
    id: irrigation_channel{{ i+1 }}
    pin: GPIO{{ pins[i] }}
    inverted: true
    restore_mode: ALWAYS_OFF
  for:
    i in range(zones|int)
    pins: [25, 26, 27, 14]  # Номера пинов для зон 1-4

  # Переключатели для дней недели
  - platform: template
    name: "{{ day|capitalize }}"
    id: irrigation_{{ day }}
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      - lambda: |-
          id(days_to_run)[{{ index + 1 }}] = 1;
    turn_off_action:
      - lambda: |-
          id(days_to_run)[{{ index + 1 }}] = 0;
  for:
    day, index in {
      "sun": 0,
      "mon": 1,
      "tue": 2,
      "wed": 3,
      "thu": 4,
      "fri": 5,
      "sat": 6
    }.items()

# Упрощенные скрипты
script:
  - id: zone_wait
    then:
      - lambda: |-
          int z = id(zone_num);
          id(var_zone_remainings)[z] = id(zone_duration)[z].state;
          id(zone_remaining)[z].update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[z] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[z] -= 1;
                id(zone_remaining)[z].update();

  - id: start_next_zone
    then:
      - lambda: |-
          for (int i = id(current_zone); i < zones|int; i++) {
            if (id(zone_enabled)[i].state) {
              id(irrigation_zone)[i].turn_on();
              break;
            }
          }

# Автоматизация
interval:
  - interval: 1sec
    then:
      - lambda: |-
          if (id(temperature).state <= id(min_temp).state || 
              id(rainfall).state > id(max_mm_rainfall).state) return;
          
          int current_day = id(homeassistant_time).now().day_of_week;
          if (id(days_to_run)[current_day] == 0) return;

          const char* start_time = id(irrigation_start).state.c_str();
          const char* current_time = id(homeassistant_time).now().strftime("%H:%M").c_str();

          if (strcmp(start_time, current_time) != 0) return;

          for (int i = 0; i < zones|int; i++) {
            if (id(zone_enabled)[i].state && !id(irrigation_zone)[i].state) {
              id(irrigation_zone)[i].turn_on();
              break;
            }
          }
