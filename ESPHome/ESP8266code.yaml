substitutions:
  device_name: irrigation
  switch_id: "Irrigation"
  rainfall: sensor.ekopark_rain_amount #sensor.buienradar_rain_1d
  temperature: sensor.ekopark_temperature #sensor.buienradar_temperature

esphome:
  name: sprinkler-controller-8266
  friendly_name: Sprinkler-controller_8266

esp8266:
  board: d1_mini  # Для NodeMCU используйте nodemcuv2


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "s56QrHIINVkc1aLZpa2c1oxhsQKQsnQHro6OGkHge+8="



ota:
  - platform: esphome
    password: "4267c278133be059da8d662035c6e4b1"

wifi:
  ssid: "TP-LINK_2.4GHz_3D8414"
  password: "!!!Lexus163"
  manual_ip:
    static_ip: 192.168.1.168
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Sprinkler-Controller-8266"
    password: "NndZWwle6kUs"

captive_portal:

#web_server:
#  port: 80
#  version: 2
#  css_url: https://esphome.github.io/_static/webserver-v2.min.css
#  js_url: https://esphome.github.io/_static/webserver-v2.min.js
#  auth:
#    username: admin
#    password: "!!!Lexus163"




time:
  - platform: homeassistant
    id: homeassistant_time

globals:
  - id: var_zone_remainings
    type: int[4]
    initial_value: "{0, 0, 0, 0}"
  - id: days_to_run
    type: int[8]
    initial_value: "{0, 0, 0, 0, 0, 0, 0, 0}"

# Enable Home Assistant API
#api:
button:
  - platform: restart
    id: irrigation_restart
    name: "${switch_id} Restart"

binary_sensor:
  # Connection status
  - platform: status
    name: "${switch_id} Status"

select:
  - platform: template
    name: "${switch_id} start"
    id: irrigation_start
    options: &start_options
      ["00:00", "00:15", "00:30", "00:45",
       "01:00", "01:15", "01:30", "01:45",
       "02:00", "02:15", "02:30", "02:45",
       "03:00", "03:15", "03:30", "03:45",
       "04:00", "04:15", "04:30", "04:45",
       "05:00", "05:15", "05:30", "05:45",
       "06:00", "06:15", "06:30", "06:45",
       "07:00", "07:15", "07:30", "07:45",
       "08:00", "08:15", "08:30", "08:45",
       "09:00", "09:15", "09:30", "09:45",
       "10:00", "10:15", "10:30", "10:45",
       "11:00", "11:15", "11:30", "11:45",
       "12:00", "12:15", "12:30", "12:45",
       "13:00", "13:15", "13:30", "13:45",
       "14:00", "14:15", "14:30", "14:45",
       "15:00", "15:15", "15:30", "15:45",
       "16:00", "16:15", "16:30", "16:45",
       "17:00", "17:15", "17:30", "17:45",
       "18:00", "18:15", "18:30", "18:45",
       "19:00", "19:15", "19:30", "19:45",
       "20:00", "20:15", "20:30", "20:45",
       "21:00", "21:15", "21:30", "21:45",
       "22:00", "22:15", "22:30", "22:45",
       "23:00", "23:15", "23:30", "23:45",
      ]
    initial_option: "18:00"
    optimistic: true
    restore_value: true

number:
  - platform: template
    id: zone1_duration
    name: "Zone 1 duration"
    step: 1
    min_value: 0
    max_value: 60
    initial_value: 15
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  - platform: template
    id: zone2_duration
    name: "Zone 2 duration"
    step: 1
    min_value: 0
    max_value: 60
    initial_value: 15
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  - platform: template
    id: zone3_duration
    name: "Zone 3 duration"
    step: 1
    min_value: 0
    max_value: 60
    initial_value: 15
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  - platform: template
    id: zone4_duration
    name: "Zone 4 duration"
    step: 1
    min_value: 0
    max_value: 60
    initial_value: 15
    unit_of_measurement: min
    optimistic: true
    restore_value: true
  - platform: template
    id: max_mm_rainfall
    name: "Max mm of rainfall"
    step: 0.5
    min_value: 0
    max_value: 10
    initial_value: 3
    unit_of_measurement: mm
    optimistic: true
    restore_value: true
  - platform: template
    id: min_temp
    name: "Minimum temperature"
    step: 1
    min_value: 0
    max_value: 25
    initial_value: 17
    unit_of_measurement: °C
    optimistic: true
    restore_value: true

sensor:
  #home assisatnt imported sensors
  - platform: homeassistant
    id: rainfall
    entity_id: ${rainfall}
  - platform: homeassistant
    id: temperature
    entity_id: ${temperature}


  - platform: wifi_signal
    name: "${switch_id} Wifi"
    update_interval: 60s

  #
  # Template Sensors
  #
  - platform: template
    id: zone1_remaining
    name: "Zone 1 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[0];"
  - platform: template
    id: zone2_remaining
    name: "Zone 2 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[1];"
  - platform: template
    id: zone3_remaining
    name: "Zone 3 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[2];"
  - platform: template
    id: zone4_remaining
    name: "Zone 4 remaining"
    accuracy_decimals: 0
    unit_of_measurement: min
    lambda: "return id(var_zone_remainings)[3];"


switch:
  #
  # Template Switches
  
  
  - platform: template
    name: "${switch_id} Zone 1"
    id: irrigation_zone1
    lambda: 'return id(irrigation_channel1).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel1
      - script.execute: zone1_wait
      - script.wait: zone1_wait
      - script.execute: zone2_start
      - script.wait: zone2_start      
      - switch.turn_off: irrigation_channel1
    turn_off_action:
      - script.stop: zone1_wait
      - lambda: |-
          id(var_zone_remainings)[0] = 0;
          id(zone1_remaining).update();
      - switch.turn_off: irrigation_channel1

  - platform: template
    name: "${switch_id} Zone 2"
    id: irrigation_zone2
    lambda: 'return id(irrigation_channel2).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel2
      - script.execute: zone2_wait
      - script.wait: zone2_wait
      - script.execute: zone3_start
      - script.wait: zone3_start  
      - switch.turn_off: irrigation_channel2
    turn_off_action:
      - script.stop: zone2_wait
      - lambda: |-
          id(var_zone_remainings)[1] = 0;
          id(zone2_remaining).update();
      - switch.turn_off: irrigation_channel2

  - platform: template
    name: "${switch_id} Zone 3"
    id: irrigation_zone3
    lambda: 'return id(irrigation_channel3).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel3
      - script.execute: zone3_wait
      - script.wait: zone3_wait
      - script.execute: zone4_start
      - script.wait: zone4_start        
      - switch.turn_off: irrigation_channel3
    turn_off_action:
      - script.stop: zone3_wait
      - lambda: |-
          id(var_zone_remainings)[2] = 0;
          id(zone3_remaining).update();
      - switch.turn_off: irrigation_channel3

  - platform: template
    name: "${switch_id} Zone 4"
    id: irrigation_zone4
    lambda: 'return id(irrigation_channel4).state;'
    turn_on_action:
      - switch.turn_on: irrigation_channel4
      - script.execute: zone4_wait
      - script.wait: zone4_wait
      - switch.turn_off: irrigation_channel4
    turn_off_action:
      - script.stop: zone4_wait
      - lambda: |-
          id(var_zone_remainings)[3] = 0;
          id(zone4_remaining).update();
      - switch.turn_off: irrigation_channel4
  #
#   - platform: template
#     name: "${switch_id} Zone 1"
#     id: irrigation_zone1
#     lambda: 'return id(irrigation_channel1).state;'
#     turn_on_action:
#       - switch.turn_on: irrigation_channel1
#       - script.execute: zone1_wait
#       - script.wait: zone1_wait
#       - switch.turn_off: irrigation_channel1
#     turn_off_action:
#       - script.stop: zone1_wait
#       - lambda: |-
#           id(var_zone_remainings)[0] = 0;
#           id(zone1_remaining).update();
#       - switch.turn_off: irrigation_channel1

#   - platform: template
#     name: "${switch_id} Zone 2"
#     id: irrigation_zone2
#     lambda: 'return id(irrigation_channel2).state;'
#     turn_on_action:
#       - switch.turn_on: irrigation_channel2
#       - script.execute: zone2_wait
#       - script.wait: zone2_wait
#       - switch.turn_off: irrigation_channel2
#     turn_off_action:
#       - script.stop: zone2_wait
#       - lambda: |-
#           id(var_zone_remainings)[1] = 0;
#           id(zone2_remaining).update();
#       - switch.turn_off: irrigation_channel2

#   - platform: template
#     name: "${switch_id} Zone 3"
#     id: irrigation_zone3
#     lambda: 'return id(irrigation_channel3).state;'
#     turn_on_action:
#       - switch.turn_on: irrigation_channel3
#       - script.execute: zone3_wait
#       - script.wait: zone3_wait
#       - switch.turn_off: irrigation_channel3
#     turn_off_action:
#       - script.stop: zone3_wait
#       - lambda: |-
#           id(var_zone_remainings)[2] = 0;
#           id(zone3_remaining).update();
#       - switch.turn_off: irrigation_channel3

#   - platform: template
#     name: "${switch_id} Zone 4"
#     id: irrigation_zone4
#     lambda: 'return id(irrigation_channel4).state;'
#     turn_on_action:
#       - switch.turn_on: irrigation_channel4
#       - script.execute: zone4_wait
#       - script.wait: zone4_wait
#       - switch.turn_off: irrigation_channel4
#     turn_off_action:
#       - script.stop: zone4_wait
#       - lambda: |-
#           id(var_zone_remainings)[3] = 0;
#           id(zone4_remaining).update();
#       - switch.turn_off: irrigation_channel4

  - platform: template
    name: "Mon"
    id: irrigation_monday
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      - lambda: |-
          id(days_to_run)[2] = 1;
    turn_off_action:
      - lambda: |-
          id(days_to_run)[2] = 0;
  - platform: template
    name: "Tue"
    id: irrigation_tuesday
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      - lambda: |-
          id(days_to_run)[3] = 1;
    turn_off_action:
      - lambda: |-
          id(days_to_run)[3] = 0;
  - platform: template
    name: "Wed"
    id: irrigation_wednesday
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      - lambda: |-
          id(days_to_run)[4] = 1;
    turn_off_action:
      - lambda: |-
          id(days_to_run)[4] = 0;
  - platform: template
    name: "Thu"
    id: irrigation_thursday
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      - lambda: |-
          id(days_to_run)[5] = 1;
    turn_off_action:
      - lambda: |-
          id(days_to_run)[5] = 0;
  - platform: template
    name: "Fri"
    id: irrigation_friday
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      - lambda: |-
          id(days_to_run)[6] = 1;
    turn_off_action:
      - lambda: |-
          id(days_to_run)[6] = 0;
  - platform: template
    name: "Sat"
    id: irrigation_saturday
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      - lambda: |-
          id(days_to_run)[7] = 1;
    turn_off_action:
      - lambda: |-
          id(days_to_run)[7] = 0;
  - platform: template
    name: "Sun"
    id: irrigation_sunday
    optimistic: true
    restore_mode: ALWAYS_ON
    turn_on_action:
      - lambda: |-
          id(days_to_run)[1] = 1;
    turn_off_action:
      - lambda: |-
          id(days_to_run)[1] = 0;

    
  - platform: template
    name: "Zone 1 enabled"
    id: zone1_enabled
    optimistic: true
    restore_mode: ALWAYS_ON
  - platform: template
    name: "Zone 2 enabled"
    id: zone2_enabled
    optimistic: true
    restore_mode: ALWAYS_ON
  - platform: template
    name: "Zone 3 enabled"
    id: zone3_enabled
    optimistic: true
    restore_mode: ALWAYS_ON
  - platform: template
    name: "Zone 4 enabled"
    id: zone4_enabled
    optimistic: true
    restore_mode: ALWAYS_ON

  #
  # GPIO Switches
  #
  - platform: gpio
    id: irrigation_channel4
    pin: GPIO14
    inverted: true
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: irrigation_channel3
    pin: GPIO15
    inverted: true
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: irrigation_channel2
    pin: GPIO12
    inverted: true
    restore_mode: ALWAYS_OFF

  - platform: gpio
    id: irrigation_channel1
    pin: GPIO13
    inverted: true
    restore_mode: ALWAYS_OFF


#
# Scripts

#
script:
  - id: turn_off_valves
    then:
      - switch.turn_off: irrigation_zone1
      - switch.turn_off: irrigation_zone2
      - switch.turn_off: irrigation_zone3
      - switch.turn_off: irrigation_zone4

  - id: zone1_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[0] = id(zone1_duration).state;
          id(zone1_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[0] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[0] -= 1;
                id(zone1_remaining).update();

  - id: zone2_start
    then:
      - lambda: |-
          if (id(zone2_enabled).state == 1)
            id(irrigation_zone2).turn_on();
          if (id(zone3_enabled).state == 1 && id(zone2_enabled).state == 0)
            id(irrigation_zone3).turn_on();
          if (id(zone4_enabled).state == 1 && id(zone3_enabled).state == 0 && id(zone2_enabled).state == 0)
            id(irrigation_zone4).turn_on();

                  
  - id: zone2_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[1] = id(zone2_duration).state;
          id(zone2_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[1] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[1] -= 1;
                id(zone2_remaining).update();
                  
  - id: zone3_start
    then:
      - lambda: |-
          if (id(zone3_enabled).state == 1)
            id(irrigation_zone3).turn_on();
          if (id(zone4_enabled).state == 1 && id(zone3_enabled).state == 0)
            id(irrigation_zone4).turn_on();         
                  
  - id: zone3_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[2] = id(zone3_duration).state;
          id(zone3_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[2] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[2] -= 1;
                id(zone3_remaining).update();
            
                  
  - id: zone4_start
    then:
      - lambda: |-
          if (id(zone4_enabled).state == 1)
            id(irrigation_zone4).turn_on();

                  
  - id: zone4_wait
    then:
      - lambda: |-
          id(var_zone_remainings)[3] = id(zone4_duration).state;
          id(zone4_remaining).update();
      - while:
          condition:
            lambda: "return id(var_zone_remainings)[3] > 0;"
          then:
            - delay: 1min
            - lambda: |-
                id(var_zone_remainings)[3] -= 1;
                id(zone4_remaining).update();

#
#   - id: zone1_wait
#     then:
#       - lambda: |-
#           id(var_zone_remainings)[0] = id(zone1_duration).state;
#           id(zone1_remaining).update();
#       - if:
#           condition:
#             lambda: "return id(var_zone_remainings)[0] > 0;"
#           then:
#             - delay: 1min
#             # - lambda: |-
#                 # id(var_zone_remainings)[0] -= 1;
#                 # id(zone1_remaining).update();
#           else:
#             - lambda: |-
#                 id(var_zone_remainings)[0] -= 1;
#                 id(zone1_remaining).update();
#                 if (id(zone2_enabled).state == 1)
#                   id(irrigation_zone2).turn_on();
#                 if (id(zone3_enabled).state == 1 && id(zone2_enabled).state == 0)
#                   id(irrigation_zone3).turn_on();
#                 if (id(zone4_enabled).state == 1 && id(zone3_enabled).state == 0 && id(zone2_enabled).state == 0)
#                   id(irrigation_zone4).turn_on();
#   - id: zone2_wait
#     then:
#       - lambda: |-
#           id(var_zone_remainings)[1] = id(zone2_duration).state;
#           id(zone2_remaining).update();
#       - if:
#           condition:
#             lambda: "return id(var_zone_remainings)[1] > 0;"
#           then:
#             - delay: 1min
#             - lambda: |-
#                 id(var_zone_remainings)[1] -= 1;
#                 id(zone2_remaining).update();
#           else:      
#             - lambda: |-
#                 id(var_zone_remainings)[1] -= 1;
#                 id(zone2_remaining).update();
#                 if (id(zone3_enabled).state == 1)
#                   id(irrigation_zone3).turn_on();
#                 if (id(zone4_enabled).state == 1 && id(zone3_enabled).state == 0)
#                   id(irrigation_zone4).turn_on();
#   - id: zone3_wait
#     then:
#       - lambda: |-
#           id(var_zone_remainings)[2] = id(zone3_duration).state;
#           id(zone3_remaining).update();
#       - if:
#           condition:
#             lambda: "return id(var_zone_remainings)[2] > 0;"
#           then:
#             - delay: 1min
#             - lambda: |-
#                 id(var_zone_remainings)[2] -= 1;
#                 id(zone3_remaining).update();
#           else:       
#             - lambda: |-
#                 id(var_zone_remainings)[2] -= 1;
#                 id(zone3_remaining).update();
#                 if (id(zone4_enabled).state == 1)
#                   id(irrigation_zone4).turn_on();
#   - id: zone4_wait
#     then:
#       - lambda: |-
#           id(var_zone_remainings)[3] = id(zone4_duration).state;
#           id(zone4_remaining).update();
#       - while:
#           condition:
#             lambda: "return id(var_zone_remainings)[3] > 0;"
#           then:
#             - delay: 1min
#             - lambda: |-
#                 id(var_zone_remainings)[3] -= 1;
#                 id(zone4_remaining).update();
                
#   - id: zone1_wait
#     then:
#       - lambda: |-
#           id(var_zone_remainings)[0] = id(zone1_duration).state;
#           id(zone1_remaining).update();
#       - while:
#           condition:
#             lambda: "return id(var_zone_remainings)[0] > 0;"
#           then:
#             - delay: 1min
#             - lambda: |-
#                 id(var_zone_remainings)[0] -= 1;
#                 id(zone1_remaining).update();
#                 if (id(zone2_enabled).state == 1)
#                   id(irrigation_zone2).turn_on();
#                 if (id(zone3_enabled).state == 1 && id(zone2_enabled).state == 0)
#                   id(irrigation_zone3).turn_on();
#                 if (id(zone4_enabled).state == 1 && id(zone3_enabled).state == 0 && id(zone2_enabled).state == 0)
#                   id(irrigation_zone4).turn_on();
#   - id: zone2_wait
#     then:
#       - lambda: |-
#           id(var_zone_remainings)[1] = id(zone2_duration).state;
#           id(zone2_remaining).update();
#       - while:
#           condition:
#             lambda: "return id(var_zone_remainings)[1] > 0;"
#           then:
#             - delay: 1min
#             - lambda: |-
#                 id(var_zone_remainings)[1] -= 1;
#                 id(zone2_remaining).update();
#                 if (id(zone3_enabled).state == 1)
#                   id(irrigation_zone3).turn_on();
#                 if (id(zone4_enabled).state == 1 && id(zone3_enabled).state == 0)
#                   id(irrigation_zone4).turn_on();
#   - id: zone3_wait
#     then:
#       - lambda: |-
#           id(var_zone_remainings)[2] = id(zone3_duration).state;
#           id(zone3_remaining).update();
#       - while:
#           condition:
#             lambda: "return id(var_zone_remainings)[2] > 0;"
#           then:
#             - delay: 1min
#             - lambda: |-
#                 id(var_zone_remainings)[2] -= 1;
#                 id(zone3_remaining).update();
#                 if (id(zone4_enabled).state == 1)
#                   id(irrigation_zone4).turn_on();
#   - id: zone4_wait
#     then:
#       - lambda: |-
#           id(var_zone_remainings)[3] = id(zone4_duration).state;
#           id(zone4_remaining).update();
#       - while:
#           condition:
#             lambda: "return id(var_zone_remainings)[3] > 0;"
#           then:
#             - delay: 1min
#             - lambda: |-
#                 id(var_zone_remainings)[3] -= 1;
#                 id(zone4_remaining).update();


#Time automations

interval:
  - interval: 1sec
    then:
     - lambda: |-
          // Check if today is an active irrigation
          if (id(temperature).state <= id(min_temp).state || id(rainfall).state > id(max_mm_rainfall).state) return; 
          int current_day = id(homeassistant_time).now().day_of_week;
          if ((id(days_to_run)[current_day]) == 0) return;
          // time based
          if (id(zone1_enabled).state &&
            !id(irrigation_zone1).state &&
            id(homeassistant_time).now().strftime("%H:%M") == id(irrigation_start).state)
              id(irrigation_zone1).turn_on();
          if (id(zone2_enabled).state &&
            !id(irrigation_zone2).state &&
            id(homeassistant_time).now().strftime("%H:%M") == id(irrigation_start).state && id(zone1_enabled).state == 0)
              id(irrigation_zone2).turn_on();
          if (id(zone3_enabled).state &&
            !id(irrigation_zone3).state &&
            id(homeassistant_time).now().strftime("%H:%M") == id(irrigation_start).state && id(zone1_enabled).state == 0 && id(zone2_enabled).state == 0)
              id(irrigation_zone3).turn_on();
          if (id(zone4_enabled).state &&
            !id(irrigation_zone4).state &&
            id(homeassistant_time).now().strftime("%H:%M") == id(irrigation_start).state && id(zone1_enabled).state == 0 && id(zone2_enabled).state == 0 && id(zone3_enabled).state == 0)
              id(irrigation_zone4).turn_on();
